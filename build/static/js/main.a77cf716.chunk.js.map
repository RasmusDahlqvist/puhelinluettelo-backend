{"version":3,"sources":["services/persons.js","components/PersonForm.js","components/Filter.js","components/Person.js","components/notifications/NotificationAdd.js","components/notifications/NotificationDelete.js","components/notifications/NotificationError.js","components/notifications/NotificationReplace.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","newObject","axios","post","get","id","delete","put","PersonForm","props","onSubmit","checkName","persons","newName","rePlacePerson","addPerson","value","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","handleFilterChange","Person","name","number","onClick","remove","NotificationAdd","message","className","NotificationDelete","NotificationError","NotificationReplace","App","useState","setPersons","setNewName","setNewNumber","filterList","setFilterList","showAll","setShowAll","addedMessage","setAddedMessage","deletedMessage","setDeletedMessage","replacedMessage","setReplacedMessage","errorMessage","setErrorMessage","useEffect","console","log","personService","then","response","data","filtered","personsToShow","event","filter","person","toUpperCase","includes","target","arr","val","some","element","preventDefault","find","p","changedPerson","window","confirm","map","setTimeout","catch","error","personObject","concat","returnedPerson","messageError","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a77cf716.chunk.js","sourcesContent":["import axios from 'axios'\n//const baseUrl = 'http://localhost:3001/api/persons'\n//const baseUrl = 'https://protected-waters-27763.herokuapp.com/api/persons'\nconst baseUrl = 'api/persons'\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst remove = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`,newObject)\n    \n}\nexport default {\n    create: create,\n    getAll: getAll,\n    remove: remove,\n    update: update\n}","import React from 'react'\n\nconst PersonForm = (props) => \n{\n  return(\n  <div>\n  <form onSubmit= {props.checkName(props.persons, props.newName) ? props.rePlacePerson : props.addPerson} >\n  <div>\n    name: <input value={props.newName}\n    onChange={props.handleNameChange} />\n  </div>\n\n  <div>\n    number: <input value={props.newNumber}\n    onChange={props.handleNumberChange} />\n  </div>\n  <div>\n    <button type=\"submit\">add</button>\n  </div>\n</form>\n</div>\n  )\n}\n\n\n\nexport default PersonForm","import React from \"react\"\n\n\nconst Filter = (props) => \n{\n  return (\n    <div>\n      \n      filter shown with<input\n      type=\"text\"\n      onChange={props.handleFilterChange}\n\n      />\n    </div>\n  )\n}\n\nexport default Filter","import React from \"react\"\n\nconst Person = (props) => \n{\n  return (\n    <div>\n     <p>{props.name} {props.number}   <button onClick={props.remove}>Delete</button></p>\n    \n\n   </div>\n  )\n   \n}\n\nexport default Person","import React from 'react'\n\n\n\nconst NotificationAdd = ({message}) => {\n    if(message === null) {\n      return null\n    }\n    \n    \n      return (\n        <div className=\"added\">\n        {message}\n      </div>\n  \n      )\n    }\n   \n\nexport default NotificationAdd","import React from 'react'\n\n\nconst NotificationDelete = ({message}) => {\n    if(message === null) {\n      return null\n    }\n    \n   \n      return (\n        <div className=\"deleted\">\n        {message}\n      </div>\n  \n      )\n    }\n\nexport default NotificationDelete","import React from 'react'\n\nconst NotificationError = ({message}) => {\n    if(message === null) {\n      return null\n      }\n      \n      return (\n        <div className=\"error\">\n          {message}\n        </div>\n      )\n    }\n  \n\nexport default NotificationError","import React from 'react'\n\nconst NotificationReplace = ({message}) => {\n    if(message === null) {\n      return null\n    }\n    \n    \n      return (\n        <div className=\"replaced\">\n        {message}\n      </div>\n  \n      )\n    }\n\n\nexport default NotificationReplace ","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Person from './components/Person'\nimport NotificationAdd from './components/notifications/NotificationAdd'\nimport NotificationDelete from './components/notifications/NotificationDelete'\nimport NotificationError from './components/notifications/NotificationError'\nimport NotificationReplace from './components/notifications/NotificationReplace'\n\n\n\n\n\n\n \nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterList, setFilterList] = useState([{name:'' , number: ''}])\n  const [showAll, setShowAll] = useState(true)\n  const [addedMessage, setAddedMessage] = useState(null)\n  const [deletedMessage, setDeletedMessage] = useState(null)\n  const [replacedMessage, setReplacedMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const hook = () => {\n    console.log('effect')\n    personService\n    .getAll()\n      .then(response => {\n        console.log('promise fulfilled')\n        setPersons(response.data)\n      })\n  }\n  \n  useEffect(hook, [])\n\n  const checkName = (arr, val) => {\n    return arr.some(element => element.name === val); \n  }\n  \n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }    \n    setPersons(persons.concat(personObject));\n    personService\n    .create(personObject)\n    .then(returnedPerson => {\n  \n      ///setPersons(persons.concat(returnedPerson.data));\n      setAddedMessage(`Added ${newName}`)\n      setTimeout(() => {\n        setAddedMessage(null)\n      }, 4000)\n      setNewName('') \n      setNewNumber('')\n      \n    })\n    .catch(error => {\n      let messageError = error.response.data.error;\n      console.log(messageError)\n      setErrorMessage(`${messageError}`)\n      setTimeout(() => { setErrorMessage(null)}, 4000)\n    })\n  }\n\n\n  const rePlacePerson = (event) => {\n    event.preventDefault();\n \n  const personObject = {\n    name: newName,\n    number: newNumber\n  }    \n  \n  const person = persons.find(p => p.name === newName); \n\n  console.log('ID',person.id);\n  const changedPerson = {...person, number: newNumber}\n  console.log('changedPersons ', changedPerson); \n\n  if(window.confirm(`${person.name} is already added to phonebook, replace the old number with a new one?`)) {\n    \n  personService\n  .update(person.id, changedPerson)\n  .then(response => {\n    setPersons(persons.map(person => person.id !== changedPerson.id ? person : response.data))\n   \n    setReplacedMessage(`Replaced ${newName}`)\n    setTimeout(() => {\n      setReplacedMessage(null)\n    }, 4000)\n  })\n\n  .catch(error => {\n  setErrorMessage(`Information of ${newName} has already deleted  from server`); \n  setTimeout(() => {\n    setErrorMessage(null)\n  }, 4000)\n})\n    \n}}\n  \n  const remove = (id) => {\n\n    const person = persons.find(p => p.id === id)\n    if(window.confirm(`Delete ${person.name} ?`)) {\n            \n    personService\n    .remove(id)\n    .then(response => {\n      console.log(response);\n      setPersons(persons.filter(p => p.id !==id))\n     \n    })\n    setDeletedMessage(`Deleted ${person.name}`)\n    setTimeout(() => {\n      setDeletedMessage(null)\n    }, 4000)\n  }\n  }\n\n  const handleNameChange = (event) => {\n    \n    setShowAll(true);\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n        \n    setNewNumber(event.target.value)\n  }\n  let filtered = '';\n  const handleFilterChange = (event) => {\n    setShowAll(false);\n    filtered = persons.filter(person => person.name.toUpperCase().includes(event.target.value.toUpperCase()));\n    \n\n    setFilterList(filtered);\n      } \n  \n  const personsToShow = showAll ? persons : filterList; \n\n \n\n  const message = () => {\n    alert(`${newName} is already added to phonebook`); \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <NotificationAdd  message={addedMessage} />\n      <NotificationDelete message={deletedMessage} />\n      <NotificationReplace message={replacedMessage} />\n      <NotificationError message={errorMessage} />\n\n    \n\n      <Filter handleFilterChange={handleFilterChange} />\n\n      <h2>Add new</h2>\n     \n     <PersonForm \n      checkName={checkName}\n     persons={persons} newName={newName}\n        rePlacePerson={rePlacePerson} addPerson={addPerson}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n     />\n      \n      <h2>Numbers</h2>\n      \n    {personsToShow.map(person =>  \n      <Person\n          key={person.name}\n          name={person.name}\n          number={person.number}\n          remove={() => remove(person.id)}\n      \n      />\n\n    )}\n\n \n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}